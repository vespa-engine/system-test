# Copyright Vespa.ai. All rights reserved.

schema test {
    document test {
        field title type string {
            indexing: index
        }
        field doc_vec type tensor<double>(d0[2]) {
            indexing: attribute | summary
        }
        field score type int {
            indexing: attribute | summary
        }
    }
    fieldset default {
        fields: title
    }

    constant matrix {
        file: files/matrix.json
        type: tensor<double>(d0[2],d1[2])
    }

    document-summary minimal {
        summary documentid {}
    }

    rank-profile base {
        onnx-model multiply_add {
            file: files/multiply_add.onnx
            input "model_input_1": constant(matrix)
            input "model_input_2": attribute(doc_vec)
            input "model_input_3": query(query_vec)
            output "model_output_1": multiply_add_output
        }

        inputs {
            query(query_vec) tensor<double>(d0[2])
        }

        function fn_first_phase() {
            expression: -attribute(score)
        }

        first-phase {
            expression: fn_first_phase
        }

        function fn_query_vec() {
            expression: query(query_vec)
        }

        function fn_doc_vec() {
            expression: attribute(doc_vec)
        }
    }

    rank-profile global_phase inherits base {
        global-phase {
            rerank-count: 3
            expression: sum(onnx(multiply_add).multiply_add_output - fn_query_vec)
        }
    }

    # Streaming search uses a single rank phase. Emulate two rank phases.
    rank-profile emulated_second_phase inherits base {
        first-phase {
            expression: if(fn_first_phase > -4.0, sum(onnx(multiply_add).multiply_add_output - fn_query_vec), fn_first_phase)
        }
    }

    rank-profile global_phase_inverse_first_phase inherits base {
        global-phase {
            rerank-count: 5
            expression: -firstPhase
        }
    }

    rank-profile global_phase_fun inherits base {
        function foofun() {
            expression: sum(onnx(multiply_add).multiply_add_output - fn_query_vec)
        }
        global-phase {
            expression: 1 + foofun() + 2
        }
    }
    rank-profile global_phase_fun_mf inherits base {
        function foofun() {
            expression: sum(onnx(multiply_add).multiply_add_output - fn_query_vec)
        }
        global-phase {
            expression: 1 + foofun() + 2
        }
        match-features {
            foofun
        }
    }
    rank-profile global_phase_fun_mfre inherits base {
        function foofun() {
            expression: sum(onnx(multiply_add).multiply_add_output - fn_query_vec)
        }
        global-phase {
            expression: 1 + foofun() + 2
        }
        match-features {
            rankingExpression(foofun)
        }
    }

    rank-profile just_score {
        first-phase {
           expression: attribute(score) * 10000
        }
    }
    rank-profile just_native_rank {
        first-phase {
            expression: nativeRank
        }
    }
    rank-profile global_phase_norm_lin inherits base {
        first-phase {
           expression: attribute(score) * 10000
        }
        global-phase {
            expression: normalize_linear(nativeRank) + normalize_linear(firstPhase)
        }
        match-features {
            firstPhase
            nativeRank
        }
    }

    rank-profile global_phase_norm_rr inherits base {
        first-phase {
           expression: attribute(score) * 10000
        }
        global-phase {
            expression: reciprocal_rank(nativeRank, 49.0) + reciprocal_rank(firstPhase)
        }
        match-features {
            firstPhase
            nativeRank
        }
    }

    rank-profile global_phase_rrf inherits base {
        first-phase {
           expression: attribute(score) * 10000
        }
        function foofun() {
            expression: sum(onnx(multiply_add).multiply_add_output - fn_query_vec)
        }
        global-phase {
            expression: reciprocal_rank_fusion(nativeRank, firstPhase, foofun)
        }
        match-features {
            firstPhase
            nativeRank
        }
    }

    rank-profile using_relevance_score inherits base {
        first-phase {
           expression: sum(query(query_vec) * attribute(doc_vec))
        }
        global-phase {
            expression: relevanceScore + 10 * attribute(score)
        }
        summary-features {
            firstPhase
        }
    }
}
