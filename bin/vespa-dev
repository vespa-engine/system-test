#!/usr/bin/env bash
# This script runs INSIDE the devcontainer and executes commands directly
# (not via docker/podman exec)
set -euo pipefail

# --- Utilities ---
log()   { printf "\033[1;34m[vespa-dev]\033[0m %s\n" "$*"; }
warn()  { printf "\033[1;33m[vespa-dev]\033[0m %s\n" "$*"; }
error() { printf "\033[1;31m[vespa-dev]\033[0m %s\n" "$*"; }

# --- Config ---
VESPA_HOME="${VESPA_HOME:-$HOME/vespa}"
GIT_DIR="${GIT_DIR:-$HOME/git}"
BUILD_MARKER_DIR="$VESPA_HOME/.build-markers"
JAVA_BUILD_MARKER="$BUILD_MARKER_DIR/java-built"
CPP_BUILD_MARKER="$BUILD_MARKER_DIR/cpp-built"
INSTALL_MARKER="$BUILD_MARKER_DIR/install-completed"

# --- Core actions (run directly, no container exec needed) ---
bootstrap_code() {
  log "Bootstrapping code (idempotent)"
  mkdir -p "$GIT_DIR"
  
  if [[ ! -d "$GIT_DIR/vespa" ]]; then
    log "Cloning vespa repository..."
    git clone https://github.com/vespa-engine/vespa.git "$GIT_DIR/vespa"
  else
    log "Vespa repository already exists"
  fi
  
  if [[ ! -d "$GIT_DIR/system-test" ]]; then
    log "Cloning system-test repository..."
    git clone https://github.com/vespa-engine/system-test.git "$GIT_DIR/system-test"
  else
    log "System-test repository already exists"
  fi

  # Create logs directory for system tests
  mkdir -p "$VESPA_HOME/logs/systemtests"
  
  # Copy feature flags for system tests
  mkdir -p "$VESPA_HOME/var/vespa"
  if [[ -f "$GIT_DIR/system-test/docker/include/feature-flags.json" ]]; then
    cp -f "$GIT_DIR/system-test/docker/include/feature-flags.json" "$VESPA_HOME/var/vespa/flag.db"
    log "Feature flags configured"
  fi
}

build_java() {
  local force="${1:-}"
  if [[ "$force" == "--force" ]]; then
    log "Force rebuild requested, removing marker..."
    rm -f "$JAVA_BUILD_MARKER"
  fi
  
  log "Building Java modules..."
  cd "$GIT_DIR/vespa"
  ./bootstrap.sh java
  ./mvnw -T 1C -Dmaven.javadoc.skip=true -Dmaven.source.skip=true -DskipTests clean install
  
  # Mark as completed
  mkdir -p "$BUILD_MARKER_DIR"
  touch "$JAVA_BUILD_MARKER"
}

build_cpp() {
  local force="${1:-}"
  if [[ "$force" == "--force" ]]; then
    log "Force rebuild requested, removing marker..."
    rm -f "$CPP_BUILD_MARKER"
  fi
  
  log "Building C++ modules..."
  cd "$GIT_DIR/vespa"
  cmake .
  make -j $(($(nproc)+1))
  
  # Mark as completed
  mkdir -p "$BUILD_MARKER_DIR"
  touch "$CPP_BUILD_MARKER"
}

install_fast() {
  local force="${1:-}"
  if [[ "$force" == "--force" ]]; then
    log "Force install requested, removing marker..."
    rm -f "$INSTALL_MARKER"
  fi
  
  log "Installing (fast)..."
  cd "$GIT_DIR/vespa"
  make install/fast
  
  # Mark as completed
  mkdir -p "$BUILD_MARKER_DIR"
  touch "$INSTALL_MARKER"
}

setup_system_test() {
  log "Setting up feature flags for system tests"
  mkdir -p "$VESPA_HOME/logs/systemtests"
  mkdir -p "$VESPA_HOME/var/vespa"
  if [[ -f "$GIT_DIR/system-test/docker/include/feature-flags.json" ]]; then
    cp -f "$GIT_DIR/system-test/docker/include/feature-flags.json" "$VESPA_HOME/var/vespa/flag.db"
  fi
  log "System test directories and feature flags configured."
}

unit_java() {
  local module="${1:-}"
  cd "$GIT_DIR/vespa"
  if [[ -z "$module" ]]; then
    log "Running all Java unit tests..."
    mvn -T 1C test
  else
    log "Running Java unit tests for module: $module"
    mvn -T 1C -pl "${module}" test
  fi
}

unit_cpp() {
  local regex="${1:-}"
  cd "$GIT_DIR/vespa"
  if [[ -z "$regex" ]]; then
    log "Running all C++ unit tests..."
    ctest -j $(($(nproc)+1))
  else
    log "Running C++ unit tests matching: $regex"
    ctest -j $(($(nproc)+1)) -R "${regex}"
  fi
}

ensure_nodeserver() {
  if pgrep -fa nodeserver.sh >/dev/null; then
    log "nodeserver is already running"
  else
    log "Starting nodeserver..."
    mkdir -p "$HOME/.vespa"
    nohup "$GIT_DIR/system-test/bin/nodeserver.sh" > "$HOME/.vespa/nodeserver.log" 2>&1 &
    disown
    sleep 1
    log "nodeserver started (log: $HOME/.vespa/nodeserver.log)"
  fi
}

run_system_test() {
  local test_path="$1"
  if [[ -z "$test_path" ]]; then
    error "Usage: $0 system-test <path/to/test.rb>"
    exit 1
  fi
  ensure_nodeserver
  log "Running system test: $test_path"
  cd "$GIT_DIR/system-test"
  "$GIT_DIR/system-test/bin/runtest.sh" "$GIT_DIR/system-test/${test_path}"
}

reset_builds() {
  log "Resetting build markers..."
  rm -f "$JAVA_BUILD_MARKER" "$CPP_BUILD_MARKER" "$INSTALL_MARKER"
  log "Build markers reset. Builds will run again on next container start."
}

status() {
  log "Environment Status"
  echo "VESPA_HOME: $VESPA_HOME"
  echo "GIT_DIR: $GIT_DIR"
  echo ""
  
  if [[ -d "$GIT_DIR/vespa" ]]; then
    echo "✓ Vespa repository exists"
  else
    echo "✗ Vespa repository not found"
  fi
  
  if [[ -d "$GIT_DIR/system-test" ]]; then
    echo "✓ System-test repository exists"
  else
    echo "✗ System-test repository not found"
  fi
  
  if pgrep -fa nodeserver.sh >/dev/null; then
    echo "✓ nodeserver is running"
  else
    echo "✗ nodeserver is not running"
  fi
  
  echo ""
  echo "Build status:"
  if [[ -f "$JAVA_BUILD_MARKER" ]]; then
    echo "✓ Java build completed"
  else
    echo "✗ Java build not completed"
  fi
  
  if [[ -f "$CPP_BUILD_MARKER" ]]; then
    echo "✓ C++ build completed"
  else
    echo "✗ C++ build not completed"
  fi
  
  if [[ -f "$INSTALL_MARKER" ]]; then
    echo "✓ Install completed"
  else
    echo "✗ Install not completed"
  fi
}

help() {
  cat <<EOF
Usage: $(basename "$0") <command> [args]

This script runs INSIDE the devcontainer and executes commands directly.

Commands:
  bootstrap         Clone vespa + system-test and set feature flags
  java [--force]    Build all Java modules (--force to ignore completion marker)
  cpp [--force]     Build all C++ modules (--force to ignore completion marker)
  install [--force] Run 'make install/fast' (--force to ignore completion marker)
  reset-builds      Reset build markers (builds will run again on next container start)
  setup-test        Create directories for system tests
  unit-java [m]     Run mvn tests (optionally in module m)
  unit-cpp [regex]  Run ctest (optionally filtered)
  nodeserver        Start nodeserver if not running
  system-test <rb>  Run a given Ruby system test path (relative to system-test/)
  status            Show environment status
  help              Show this help

Note: Java, C++, and install commands automatically run on first container start.
      Use --force flag to rebuild, or reset-builds to clear all markers.

Environment variables:
  VESPA_HOME        Path to Vespa home directory (default: ~/vespa)
  GIT_DIR           Path to git repositories (default: ~/git)
EOF
}

# --- Dispatcher ---
cmd="${1:-help}"; shift || true
case "$cmd" in
  bootstrap)    bootstrap_code ;;
  java)         build_java "${1:-}" ;;
  cpp)          build_cpp "${1:-}" ;;
  install)      install_fast "${1:-}" ;;
  reset-builds) reset_builds ;;
  setup-test)   setup_system_test ;;
  unit-java)    unit_java "${1:-}" ;;
  unit-cpp)     unit_cpp "${1:-}" ;;
  nodeserver)   ensure_nodeserver ;;
  system-test)  run_system_test "${1:-}" ;;
  status)       status ;;
  help|--help|-h) help ;;
  *) error "Unknown command: $cmd"; help; exit 1 ;;
esac
